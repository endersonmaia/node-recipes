x-env: &env
  CARTESI_AUTH_KIND: private_key
  CARTESI_POSTGRES_ENDPOINT: postgres://postgres:password@database:5432/rollupsdb?sslmode=disable
  CARTESI_HTTP_ADDRESS: 0.0.0.0
  CARTESI_HTTP_PORT: 10000
  GRAPHQL_DB: "hlgraphql"
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD: "password"

services:
  devnet:
    image: ghcr.io/prototyp3-dev/test-devnet:latest
    networks:
      - devnet
    ports:
      - 8545:8545

  database:
    image: postgres:16-alpine
    shm_size: 128mb
    networks:
      - devnet
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d rollupsdb || exit 1"]
      interval: 3s
      timeout: 3s
      retries: 5
    environment:
      <<: *env
      POSTGRES_DB: rollupsdb

  node:
    image: ghcr.io/prototyp3-dev/test-node
    command: /init
    healthcheck:
      test: ["CMD-SHELL", "curl -G -f -H 'Content-Type: application/json' http://127.0.0.1:$${CARTESI_HTTP_PORT}/healthz"]
      interval: 1s
      timeout: 1s
      retries: 5
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - node_data:/var/lib/cartesi-rollups-node/data
      - snapshots:/mnt/snapshots
    networks:
      - devnet
    # ports:
    #   - "10000:10000" # Supervisor
    #   - "3333:3333" # Input Reader
    environment:
      <<: *env
    env_file:
     - ${ENVFILENAME}

  graphql:
    image: ghcr.io/prototyp3-dev/test-hlgraphql:latest
    command: /init
    healthcheck:
      test: ["CMD-SHELL", "wget -qO /dev/null --header='Content-Type: application/json' --post-data='{\"query\":\"{ inputs(last:1) { edges { node { id } } } }\"}' 'http://127.0.0.1:10004/graphql'"]
      interval: 1s
      timeout: 1s
      retries: 5
    depends_on:
      database:
        condition: service_healthy
    networks:
      - devnet
    # ports:
    #   - "10004:10004"
    environment:
      <<: *env
      GRAPHQL_PORT: 10004
      POSTGRES_HOST: "database"
      POSTGRES_PORT: 5432
      POSTGRES_DB: "hlgraphql"
    env_file:
     - ${ENVFILENAME}

  proxy:
    image: traefik:3.2.0
    entrypoint: /bin/sh
    command:
      - "-c"
      - |
        mkdir -p /etc/traefik
        echo '
        ping: {}
        log:
          level: INFO
        entryPoints:
          web:
            address: ":80"
            asDefault: true
        providers:
          file:
            filename: /etc/traefik/file_conf.yaml
        accessLog: {}
        ' > /etc/traefik/traefik.yaml
        echo '
        http:
          routers:
            inspect-router:
              rule: "PathPrefix(`/inspect`)"
              service: inspect-service
            graphql-router:
              rule: "PathPrefix(`/graphql`)"
              service: graphql-service
            input-reader-router:
              rule: "PathPrefix(`/nonce`) || PathPrefix(`/submit`)"
              service: input-reader-service
          services:
            inspect-service:
              loadBalancer:
                servers:
                  - url: "http://node:10000/inspect"
            graphql-service:
              loadBalancer:
                servers:
                  - url: "http://graphql:10004/graphql"
            input-reader-service:
              loadBalancer:
                servers:
                  - url: "http://node:10030/"
                    preservePath: true
        ' > /etc/traefik/file_conf.yaml
        exec /entrypoint.sh traefik
    healthcheck:
      test: ["CMD-SHELL", "wget -qO /dev/null 'http://127.0.0.1:8080/ping'"]
      interval: 1s
      timeout: 1s
      retries: 5
    networks:
      - devnet
    ports:
      - "8080:80"

volumes:
  node_data:
  snapshots:

networks:
  devnet:
